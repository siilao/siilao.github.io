<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>简单图床项目的TG快捷上传机器人</title>
    <link href="/2025/09/19/%E5%A4%96%E7%BD%91%E6%95%99%E7%A8%8B/%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BA%8A%E9%A1%B9%E7%9B%AE%E7%9A%84TG%E5%BF%AB%E6%8D%B7%E4%B8%8A%E4%BC%A0%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <url>/2025/09/19/%E5%A4%96%E7%BD%91%E6%95%99%E7%A8%8B/%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BA%8A%E9%A1%B9%E7%9B%AE%E7%9A%84TG%E5%BF%AB%E6%8D%B7%E4%B8%8A%E4%BC%A0%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>简单图床使用TG快捷上传，通过api对接，真的很好用，用了就回不去那种</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><blockquote><p>安装 Docker: 确保系统中已安装 Docker（运行 docker –version 检查）。</p><p>EasyImages2.0 图床: 已部署 EasyImages2.0<br>（参考 <a href="https://www.nodeseek.com/jump?to=https://github.com/icret/EasyImages2.0">GitHub</a>），获取 API URL 和 Token。</p><p>Telegram 账户: 拥有 Telegram 应用并登录。</p></blockquote><h2 id="简单图床TG机器人部署"><a href="#简单图床TG机器人部署" class="headerlink" title="简单图床TG机器人部署"></a>简单图床TG机器人部署</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p /home/docker/tgeasyimgebot<br><br><span class="hljs-built_in">cd</span> /home/docker/tgeasyimgebot<br><br></code></pre></td></tr></table></figure><h4 id="创建-docker-compose-yaml"><a href="#创建-docker-compose-yaml" class="headerlink" title="创建 docker-compose.yaml"></a>创建 <code>docker-compose.yaml</code></h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nano</span> docker-compose.yml<br><br></code></pre></td></tr></table></figure><p>填入信息</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">tg-easyimage-bot</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">xiizero/tgeasyimgebot:latest</span><br>    <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">tg-easyimage-bot</span><br>    <span class="hljs-attribute">environment</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TELEGRAM_BOT_TOKEN=        #Telegram 提供的 Bot Token，由 @BotFather 生成，用于认证机器人身份。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">EASYIMAGE_API_URL=         #EasyImages2.0 图床的 API 端点，用于上传图片。</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">EASYIMAGE_TOKEN=           #EasyImages2.0 提供的认证 Token，用于访问 API</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ALLOWED_USERS=             #允许使用机器人的 Telegram 用户 ID 列表多个 ID 用逗号分隔。如果留空，所有用户均可使用。</span><br>    <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br><br></code></pre></td></tr></table></figure><blockquote><p><code>TELEGRAM_BOT_TOKEN</code> Telegram 提供的 Bot Token，由 @BotFather 生成，用于认证机器人身份。</p><p><code>EASYIMAGE_API_URL</code> EasyImages2.0 图床的 API 端点，用于上传图片。</p><p><code>EASYIMAGE_TOKEN</code> EasyImages2.0 提供的认证 Token，用于访问 API</p><p><code>ALLOWED_USERS</code> 允许使用机器人的 Telegram 用户 ID 列表多个 ID 用逗号分隔。如果留空，所有用户均可使用。</p><p>按一下 <code>Ctrl+x</code>，选择 <code>Y</code> ,然后回车退出</p></blockquote><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/docker/tgeasyimgebot   <span class="hljs-comment"># 来到 dockercompose 文件所在的文件夹下</span><br><br>docker-compose up -d<br></code></pre></td></tr></table></figure><blockquote><p>理论上我们就可以输入<a href="http://ip:8080/">http://ip:8080</a> 访问了。</p></blockquote><h3 id="更新docker项目"><a href="#更新docker项目" class="headerlink" title="更新docker项目"></a>更新docker项目</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino">cd /home/docker/tgeasyimgebot<br><br>docker-compose down <br><br>docker-compose pull<br><br>docker-compose up -d<br><br>docker image prune -a<br></code></pre></td></tr></table></figure><h3 id="卸载docker项目"><a href="#卸载docker项目" class="headerlink" title="卸载docker项目"></a>卸载docker项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/docker/tgeasyimgebot<br><br>docker-compose down<br><br><span class="hljs-built_in">rm</span> -rf /home/docker/tgeasyimgebot<br><br>docker image prune -a<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>外网教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单图床</tag>
      
      <tag>TGbot</tag>
      
      <tag>EasyImages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何用Hexo搭建个人博客?</title>
    <link href="/2025/09/18/%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/09/18/%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6/%E5%A6%82%E4%BD%95%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="如何用Hexo搭建个人博客"><a href="#如何用Hexo搭建个人博客" class="headerlink" title="如何用Hexo搭建个人博客?"></a>如何用Hexo搭建个人博客?</h1><p>我的个人博客搭建成功啦！</p><p>这篇文章会给大家分享我是如何从0开始搭建我的个人独立博客的</p><p>接下来我们开始吧</p><p><strong>文章比较精简，没有废话，不要跳步</strong></p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>首先我们需要到对应网站下载需要的工具</p><p><strong><a href="https://nodejs.org/en/">下载nodejs</a></strong></p><hr><p><em>(这篇文章里有修改nodejs缓存路径的教学:<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">文章链接</a>，c盘战士可以不看)</em></p><p><strong><a href="https://git-scm.com/downloads">下载git</a></strong></p><hr><p>一直点确定就行，全部按它默认勾的</p><p><em>(这里有一篇详细安装教程<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">文章链接</a>，可以不看)</em></p><p><strong>接下来我们测试下是否都下载成功</strong></p><p>管理员运行cmd，依次输入</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br>npm -v（这个是<span class="hljs-keyword">node</span><span class="hljs-title">附带的）</span><br><span class="hljs-title">git</span> -v<br></code></pre></td></tr></table></figure><p><strong>下载hexo</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><h2 id="搭建仓库"><a href="#搭建仓库" class="headerlink" title="搭建仓库"></a>搭建仓库</h2><p>成功下载好工具之后，我们开始搭建GitHub存储静态页面的仓库</p><p>首先注册&#x2F;登入<a href="https://github.com/">Github</a></p><p>点击Create a new repository进入新建仓库页面</p><p>仓库名输入：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">用户名<span class="hljs-string">.github.io</span><br></code></pre></td></tr></table></figure><p>勾选 Public</p><p>勾选 Add a README file</p><p>拉到下面点击create创建</p><h2 id="生成SSH-Keys"><a href="#生成SSH-Keys" class="headerlink" title="生成SSH Keys"></a>生成SSH Keys</h2><p>进入任意文件夹，右键空白处然后点Git bash here,输入</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></td></tr></table></figure><p>然后敲4次Enter⌨️</p><p>然后进入C:\Users\用户名，在里面进入.ssh文件</p><p>用记事本打开里面的id_rsa.pub,全选复制里面的代码</p><p><strong>然后打开github</strong></p><p>进入用户设置，找到SSH keys</p><p>新建SSH keys，名称随意，在下面粘贴代码，</p><p>然后创建</p><p><strong>测试是否成功</strong></p><p>在git bash中输入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure><p>回车，然后再输入yes</p><h2 id="本地生成博客内容"><a href="#本地生成博客内容" class="headerlink" title="本地生成博客内容"></a>本地生成博客内容</h2><p>在喜欢位置新建文件Blog，然后进入文件夹</p><p>右键空白处然后点Git bash here，输入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><blockquote><p>如果‘command not find’，就在前面加上npx，如：<code>npx hexo init</code></p></blockquote><p>然后</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">hexo <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>接下来依次输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo s<br></code></pre></td></tr></table></figure><p>（如果不成功的话就重复直到成功，因为国内与github连接不稳定）</p><p>现在就可以复制生成的链接进入浏览器看到我们生成的本地服务器了</p><p>然后回到命令行，ctrl+c关闭</p><h2 id="上线博客"><a href="#上线博客" class="headerlink" title="上线博客"></a>上线博客</h2><p>进入之前的Blog文件夹，用记事本打开_config.yml</p><p>拉到最下面将deploy后面的全删掉，复制粘贴这段</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">type:</span> git<br><span class="hljs-symbol">repository:</span> <br><span class="hljs-symbol">branch:</span> main<br></code></pre></td></tr></table></figure><blockquote><p>注意缩进格式：每行前面都有两个空格不要删，每个冒号后面都有个空格也不要删！</p></blockquote><p>去github之前生成的仓库页面，点code，复制https链接</p><p>将其粘贴到我们记事本中的<code>repository：</code>后面</p><p>然后保存退出</p><p><strong>回到博客文件夹，git bash</strong></p><p>安装自动部署发布工具</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后在Blog文件夹右键打开git bash，依次输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span>（生成）<br>hexo d（上传）<br></code></pre></td></tr></table></figure><blockquote><p>如果是第一次使用git的话会需要配置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;你的邮箱&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;你的名字&quot;</span><br></code></pre></td></tr></table></figure><p>配置完后再<code>hexo d</code>上传</p><p>在跳出来的窗口内进行登录</p></blockquote><p>接下来我们就成功把本地内容上传到github了</p><p>上传成功以后，我们就算搭建好了！上自己的网址看看吧</p><p>网址是我们之前设的仓库名：用户名.github.io</p><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的_config.yml文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta">## Site</span><br><span class="hljs-symbol">title:</span> 标题<br><span class="hljs-symbol">subtitle:</span> 副标题<br><span class="hljs-symbol">description:</span> 描述<br><span class="hljs-symbol">keywords:</span> 关键词<br><span class="hljs-symbol">author:</span> 站主<br><span class="hljs-symbol">language:</span> 语言（可以填写<span class="hljs-built_in">zh</span>-CN）<br><span class="hljs-symbol">timezone:</span> 时区（可以填写Asia/Shanghai）<br></code></pre></td></tr></table></figure><p>然后保存</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> 文章标题<br></code></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p>推荐用Typora软件来编辑.md格式的文件</p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo <span class="hljs-selector-tag">g</span><br>hexo d<br></code></pre></td></tr></table></figure><hr><p>至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。</p><p>我目前使用的hexo博客主题是<a href="http://docs.anheyu.com/">Fluid</a>，推荐主题：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>，<a href="http://docs.anheyu.com/">anzhiyu</a></p>]]></content>
    
    
    <categories>
      
      <category>建站教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VPS 搭建代理节点完整指南</title>
    <link href="/2025/09/18/%E5%A4%96%E7%BD%91%E6%95%99%E7%A8%8B/VPS%20%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <url>/2025/09/18/%E5%A4%96%E7%BD%91%E6%95%99%E7%A8%8B/VPS%20%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E8%8A%82%E7%82%B9%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="VPS-搭建代理节点完整指南"><a href="#VPS-搭建代理节点完整指南" class="headerlink" title="VPS 搭建代理节点完整指南"></a>VPS 搭建代理节点完整指南</h1><h2 id="一、使用-3x-ui-快速部署节点"><a href="#一、使用-3x-ui-快速部署节点" class="headerlink" title="一、使用 3x-ui 快速部署节点"></a>一、使用 3x-ui 快速部署节点</h2><h3 id="1-1-安装面板"><a href="#1-1-安装面板" class="headerlink" title="1.1 安装面板"></a>1.1 安装面板</h3><p>官方地址：<a href="https://github.com/MHSanaei/3x-ui?tab=readme-ov-file">3x-ui</a></p><p>推荐安装命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">bash &lt;(curl -Ls https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/mhsanaei/</span><span class="hljs-number">3</span>x-ui<span class="hljs-regexp">/master/i</span>nstall.sh)<br></code></pre></td></tr></table></figure><p>安装完成后会提示是否自定义面板端口，也可以选择默认端口，后续在后台修改。安装成功后会输出默认的：</p><ul><li>用户名</li><li>密码</li><li>面板端口</li><li>登录 URL</li></ul><p>登录后台尝试使用。</p><h3 id="1-2-快速搭建：VLESS-Reality-协议"><a href="#1-2-快速搭建：VLESS-Reality-协议" class="headerlink" title="1.2 快速搭建：VLESS + Reality 协议"></a>1.2 快速搭建：VLESS + Reality 协议</h3><p>适合：测试、临时使用、内网穿透、无域名用户。</p><p>后台面板 → 入站列表 → 添加入站：</p><ol><li>备注自定义</li><li>协议：选择 VLESS（默认）</li><li>安全：选择 Reality</li><li>点击「Get New Cert」自动生成 Reality 所需配置</li><li>其他参数默认，保存即可</li><li>输入命令 <code>x-ui</code>，打开脚本菜单</li><li>选择 <code>21</code> 进入 防火墙设置</li><li>选择 <code>3</code> 开放端口</li><li>根据提示输入协议端口号，开放端口</li></ol><p>使用客户端扫描二维码或复制订阅链接，即可连接使用。</p><h3 id="1-3-可选优化：开启-BBR-加速"><a href="#1-3-可选优化：开启-BBR-加速" class="headerlink" title="1.3 可选优化：开启 BBR 加速"></a>1.3 可选优化：开启 BBR 加速</h3><p>提升网络传输性能，减少丢包，提升速度。</p><ol><li>输入命令 <code>x-ui</code> 打开脚本菜单</li><li>选择 <code>23</code> 进入启动 BBR 菜单栏</li><li>键入 <code>1</code>，启动 BBR，配置并提示启动成功</li></ol><h2 id="二、长期运行建议配置-SSL-证书"><a href="#二、长期运行建议配置-SSL-证书" class="headerlink" title="二、长期运行建议配置 SSL 证书"></a>二、长期运行建议配置 SSL 证书</h2><h3 id="2-1-免费-Let’s-Encrypt-证书（3个月自动续期）"><a href="#2-1-免费-Let’s-Encrypt-证书（3个月自动续期）" class="headerlink" title="2.1 免费 Let’s Encrypt 证书（3个月自动续期）"></a>2.1 免费 Let’s Encrypt 证书（3个月自动续期）</h3><ol><li>输入命令 <code>x-ui</code>，打开脚本菜单</li><li>选择 <code>18</code> 进入 SSL 证书菜单</li><li>选择 <code>1</code> 安装证书</li><li>输入域名（需 A 记录解析到本机 IP）</li><li>安装成功后，选择 <code>5</code> 导入证书路径</li><li>后台 → 页面设置 → 配置证书域名路径，保存并重启面板</li></ol><blockquote><p>⚠️ Cloudflare 加速下需启用“DNS 仅解析”模式进行证书申请，否则申请失败（403）。</p></blockquote><h3 id="2-2-Cloudflare-自签证书（15-年有效，推荐）"><a href="#2-2-Cloudflare-自签证书（15-年有效，推荐）" class="headerlink" title="2.2 Cloudflare 自签证书（15 年有效，推荐）"></a>2.2 Cloudflare 自签证书（15 年有效，推荐）</h3><p>适用于已托管在 Cloudflare 的域名。</p><ol><li>登录 Cloudflare → SSL&#x2F;TLS → 源服务器证书 → 创建证书</li><li>使用默认选项，点击“创建”</li><li>下载生成的 <code>origin.pem</code> 与 <code>origin.key</code></li><li>上传到 VPS，保存至如 <code>/root/certs/</code> 路径下</li><li>后台 → 页面设置 → 填入证书路径，保存并重启面板</li></ol><blockquote><p>✅ 可避免频繁更新，推荐用于长期稳定部署。</p></blockquote><h2 id="三、通过-Cloudflare-加速节点（推荐：VLESS-WS-TLS）"><a href="#三、通过-Cloudflare-加速节点（推荐：VLESS-WS-TLS）" class="headerlink" title="三、通过 Cloudflare 加速节点（推荐：VLESS + WS + TLS）"></a>三、通过 Cloudflare 加速节点（推荐：VLESS + WS + TLS）</h2><p>适合：长期使用、速度稳定、多端设备兼容、伪装站点等场景。</p><h3 id="3-1-添加入站操作："><a href="#3-1-添加入站操作：" class="headerlink" title="3.1 添加入站操作："></a>3.1 添加入站操作：</h3><ol><li>协议：选择 VLESS</li><li>传输协议：修改为 WebSocket</li><li>域名：填写解析至 VPS 的域名（建议使用子域名）</li><li>Path：自定义，例如 <code>/ws</code>，客户端需一致</li><li>安全：TLS</li><li>SNI：同上所填域名</li><li>证书配置：<ul><li>若域名为面板域名，可直接拉取</li><li>同一 Cloudflare 主域名下子域名也可拉取</li><li>否则使用脚本申请并填写路径</li></ul></li><li>同上在命令窗口开放协议端口号</li></ol><p>📌 子域名需添加至 Cloudflare 并启用“代理”模式，确保能通过 443 端口访问</p><p>⚠️ 注意事项：</p><ul><li>Cloudflare 访问需设置「回源端口」，推荐使用以下端口：</li></ul><table><thead><tr><th>类型</th><th>常见回源端口</th></tr></thead><tbody><tr><td>HTTP</td><td>80, 8080</td></tr><tr><td>HTTPS (TLS)</td><td>443, 8443, 2053, 2083, 2087, 2096</td></tr></tbody></table><ul><li>若证书拉取失败，需关闭 CF 代理后重试</li></ul><h2 id="四、总结推荐搭配"><a href="#四、总结推荐搭配" class="headerlink" title="四、总结推荐搭配"></a>四、总结推荐搭配</h2><table><thead><tr><th>场景</th><th>推荐搭配</th></tr></thead><tbody><tr><td>快速部署</td><td>X-ui + VLESS + Reality（无需证书&#x2F;域名）</td></tr><tr><td>长期稳定 + 加速</td><td>X-ui + VLESS + WS + TLS + CF（需证书&#x2F;域名）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>外网教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3x-ui</tag>
      
      <tag>代理节点</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
